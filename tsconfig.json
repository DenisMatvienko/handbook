/**
 *    The above sample assumes version >= 2.7 or newer of TypeScript is used with the new
 *    esModuleInterop and allowSyntheticDefaultImports compiler options in your tsconfig.json file. - habitual import
 *
 *    allowSyntheticDefaultImports:
 *    from: import * as webpack from 'webpack', to: import webpack from 'webpack';
 *
 *   @notice "strict": true
 *    - state.data-field - 'data' field is optional field (not necessary). When try to apply this field and get
 *      some subfield (exc. data.firstName) - ts didn't react on this.
 *      May be situation when data will - undefined. And in this situation we are try get
 *      field from undefined. In this case app crash with error. Tht about strict mode
 */

{



    "compilerOptions": {
      "outDir": "./dist/", // place with build
      "noImplicitAny": true, // if you won't implicate data type
      "module": "ESNext",
      "target": "es5", // in which version es will be compiled
      "jsx": "react-jsx", // jsx constructions
      "allowJs": true, // not just ts file compiles, and also js
      "strict": true, // strict mode on ts files on
      "moduleResolution": "node", // define which import was (node or classic)
      "baseUrl": ".",
      "paths": {
        "*": ["./src/*"]
      },
      "esModuleInterop": true,
      "allowSyntheticDefaultImports": true
    },

    "ts-node": {
    "compilerOptions": {
        "module": "CommonJS"
        }
    },

  // https://github.com/testing-library/jest-dom#with-typescript
  "include": [
    "./configs/jest/setupTests.ts",
    "./src/**/*.ts", // solve TS2307: Cannot find module problem
    "./src/**/*.tsx" // solve TS2307: Cannot find module problem
  ]
}
